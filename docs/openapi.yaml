openapi: 3.0.0
info:
  title: AWARE API
  description: API documentation for the AWARE - Autonomous Warehouse Automated Resource Engine system
  version: 1.0.0
  contact:
    name: AWARE Team
    email: aware@example.com
servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://api.aware-system.com
    description: Production server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Node:
      type: object
      properties:
        id:
          type: string
        status:
          type: string
          enum: [connected, disconnected, leader, follower]
        address:
          type: string
        lastSeen:
          type: string
          format: date-time
        capabilities:
          type: array
          items:
            type: string
    ClusterStatus:
      type: object
      properties:
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/Node'
        leader:
          type: string
        term:
          type: integer
        health:
          type: string
          enum: [healthy, degraded, unhealthy]
    Alert:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        severity:
          type: string
          enum: [low, medium, high, critical]
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        resolved:
          type: boolean
    Resource:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        status:
          type: string
        utilization:
          type: number
        allocatedTo:
          type: string
    Error:
      type: object
      properties:
        error:
          type: string
        details:
          type: string

paths:
  /health:
    get:
      summary: Health check
      responses:
        '200':
          description: System is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /login:
    post:
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      username:
                        type: string
                      role:
                        type: string
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /register:
    post:
      summary: User registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
                role:
                  type: string
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/paths/~1login/post/responses/200/content/application~1json/schema'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/cluster/status:
    get:
      summary: Get cluster status
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Cluster status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterStatus'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/cluster/config:
    get:
      summary: Get cluster configuration
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Cluster config
          content:
            application/json:
              schema:
                type: object
    put:
      summary: Update cluster configuration
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Config updated

  /api/cluster:
    post:
      summary: Create new cluster
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '201':
          description: Cluster created

  /api/cluster/metrics:
    get:
      summary: Get cluster metrics
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Metrics
          content:
            application/json:
              schema:
                type: object

  /api/cluster/events:
    get:
      summary: Get cluster events
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Events
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object

  /api/cluster/scale-up:
    post:
      summary: Scale cluster up
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Scale up initiated

  /api/cluster/scale-down:
    post:
      summary: Scale cluster down
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Scale down initiated

  /api/nodes:
    get:
      summary: Get all nodes
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of nodes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Node'
    post:
      summary: Add new node
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Node'
      responses:
        '201':
          description: Node added

  /api/nodes/{id}:
    get:
      summary: Get specific node
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Node details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
    put:
      summary: Update node
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Node updated
    delete:
      summary: Remove node
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Node removed

  /api/nodes/{id}/health-check:
    post:
      summary: Trigger node health check
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Health check initiated

  /api/alerts:
    get:
      summary: Get all alerts
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of alerts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Alert'
    post:
      summary: Create new alert
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Alert'
      responses:
        '201':
          description: Alert created

  /api/alerts/{id}:
    get:
      summary: Get specific alert
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Alert details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alert'
    put:
      summary: Update alert
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Alert'
      responses:
        '200':
          description: Alert updated
    delete:
      summary: Delete alert
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Alert deleted

  /api/resources:
    get:
      summary: Get all resources
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of resources
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Resource'
    post:
      summary: Create new resource
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
      responses:
        '201':
          description: Resource created

  /api/resources/{id}:
    get:
      summary: Get specific resource
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Resource details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
    put:
      summary: Update resource
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
      responses:
        '200':
          description: Resource updated
    delete:
      summary: Delete resource
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Resource deleted

security:
  - bearerAuth: []
